mul-constant-to-left-1: (a*Const(c1)) => (Const(c1)*a)
mul-constant-to-left-2: ((Const(c1)*a)*b) => (Const(c1)*(a*b))
mul-constant-to-left-3: (Const(c1)*(Const(c2)*a)) => ((Const(c1)*Const(c2))*a)
mul-constant-to-left-4: (Const(c1)*Const(c2)) => (Const(c1)*Const(c2))
add-constant-to-left-1: (a+Const(c1)) => (Const(c1)+a)
add-constant-to-left-2: ((Const(c1)+a)+b) => (Const(c1)+(a+b))
add-constant-to-left-3: (Const(c1)+(Const(c2)+a)) => ((Const(c1)+Const(c2))+a)
add-constant-to-left-4: (Const(c1)+Const(c2)) => (Const(c1)+Const(c2))
and-constant-to-left-1: (a&Const(c1)) => (Const(c1)&a)
and-constant-to-left-2: ((Const(c1)&a)&b) => (Const(c1)&(a&b))
and-constant-to-left-3: (Const(c1)&(Const(c2)&a)) => ((Const(c1)&Const(c2))&a)
and-constant-to-left-4: (Const(c1)&Const(c2)) => (Const(c1)&Const(c2))
or-constant-to-left-1: (a|Const(c1)) => (Const(c1)|a)
or-constant-to-left-2: ((Const(c1)|a)|b) => (Const(c1)|(a|b))
or-constant-to-left-3: (Const(c1)|(Const(c2)|a)) => ((Const(c1)|Const(c2))|a)
or-constant-to-left-4: (Const(c1)|Const(c2)) => (Const(c1)|Const(c2))
xor-constant-to-left-1: (a^Const(c1)) => (Const(c1)^a)
xor-constant-to-left-2: ((Const(c1)^a)^b) => (Const(c1)^(a^b))
xor-constant-to-left-3: (Const(c1)^(Const(c2)^a)) => ((Const(c1)^Const(c2))^a)
xor-constant-to-left-4: (Const(c1)^Const(c2)) => (Const(c1)^Const(c2))
neg-constant-to-left-1: (~Const(c1)) => (~Const(c1))
arith-to-negation: (-1+(-1*a)) => (~a)
add-negate-to-invert-sign: (1+(~a)) => (-1*a)
head-scratcher: (((a&d)*(a|d))+((a&(~d))*((~a)&d))) => (a*d)
or-and-to-add: ((x|y)+(x&y)) => (x+y)
qsynth-1: ((2*(a&(~d)))+(-1*(a^d))) => (a+(-1*d))
qsynth-2: ((2*(d&v1))+(d^v1)) => (d+v1)
qsynth-2-commutative: ((d^v1)+(2*(d&v1))) => (d+v1)
or-zero: (0|a) => a
or-maxint: (-1|a) => -1
or-itself: (a|a) => a
or-negated-itself: (a|(~a)) => -1
xor-zero: (0^a) => a
xor-maxint: (-1^a) => (~a)
xor-itself: (a^a) => 0
xor-reduce: (((~a)&b)|(a&(~b))) => (a^b)
and-zero: (0&a) => 0
and-maxint: (-1&a) => a
and-itself: (a&a) => a
and-negated-itself: (a&(~a)) => 0
add-itself: (a+a) => (2*a)
add-zero: (0+a) => a
add-cancellation: (a+(-1*a)) => 0
mul-zero: (0*a) => 0
mul-one: (1*a) => a
power-zero: (a**0) => 1
power-one: (a**1) => a
minus-twice: (-1*(-1*a)) => a
negate-twice: (~(~a)) => a
and-bitwise-negation: ((-1+(-1*a))&b) => ((~a)&b)
or-bitwise-negation: ((-1+(-1*a))|b) => ((~a)|b)
xor-bitwise-negation: ((-1+(-1*a))^b) => ((~a)^b)
__merge_inverse_bitwise_terms-19: ((x&y)+((~x)&y)) => y
__merge_inverse_bitwise_terms-20: ((x|y)+((~x)|y)) => (-1+y)
__merge_inverse_bitwise_terms-21: ((x^y)+((~x)^y)) => -1
__merge_inverse_bitwise_terms-22: ((x|y)+(-1*((~x)&y))) => x
__merge_inverse_bitwise_terms-23: ((x^y)+(-1*(2*((~x)&y)))) => (x+(-1*y))
__merge_inverse_bitwise_terms-24: ((x^y)+(2*((~x)|y))) => ((-2+(-1*x))+y)
and-move-bitwise-negation-in: (~((~a)&b)) => (a|(~b))
or-move-bitwise-negation-in: (~((~a)|b)) => (a&(~b))
xor-move-bitwise-negation-in: (~((~a)^b)) => (a^b)
merge-power-same-base: ((a**b)*(a**c)) => (a**(b+c))
invert-add-bitwise-not-self: (a+(~a)) => -1
invert-mul-bitwise-not-self: ((a*(~b))+(a*b)) => (-1*a)
__insert_fixed_in_conj-1: (y&(~(y|x))) => 0
xor_same_mult_by_minus_one_1: (2*(a|(-1*a))) => (a^(-1*a))
xor_same_mult_by_minus_one_2: (-2*(a&(-1*a))) => (a^(-1*a))
conj_zero_rule: (a&((-1*a)&(2*a))) => 0
conj_neg_xor_zero_rule: ((~(2*a))&(-1*(a^(-1*a)))) => 0
conj_neg_xor_minus_one_rule: ((2*a)|(~(-1*(a^(-1*a))))) => -1
conj_negated_xor_zero_rule: ((2*a)&(~(a^(-1*a)))) => 0
conj_xor_identity_rule: ((2*a)&(a^(-1*a))) => (2*a)
disj_xor_identity_rule: ((2*a)|(-1*(a^(-1*a)))) => (2*a)
conj_neg_conj_identity_rule_1: ((-1*a)&(~(a&(2*a)))) => (-1*a)
conj_neg_conj_identity_rule_2: ((-1*a)&(~(a&(-2*a)))) => (-1*a)
conj_neg_conj_identity_rule_3: ((-1*a)&((~a)|(~(2*a)))) => (-1*a)
conj_neg_conj_identity_rule_4: ((-1*a)&((~a)|(~(-2*a)))) => (-1*a)
disj_disj_identity_rule: (a|(-1*(a|(-1*a)))) => a
conj_conj_identity_rule: (a&(-1*(a&(-1*a)))) => a
disj_conj_identity_rule_1: ((-1*a)|((~a)&(2*a))) => (-1*a)
disj_conj_identity_rule_2: ((-1*a)|((~a)&(-2*a))) => (-1*a)
disj_conj_identity_rule_3: ((-1*a)|(~(a|(~(2*a))))) => (-1*a)
disj_conj_identity_rule_4: ((-1*a)|(~(a|(~(-2*a))))) => (-1*a)
disj_conj_identity_rule_2_1: (x|((-1*(~x))&(2*(~x)))) => x
disj_conj_identity_rule_2_2: (x|((-1*(~x))&((-1*2)*(~x)))) => x
conj_disj_identity_rule_1: (x&((-1*(~(2*x)))|(-1*(~x)))) => x
conj_disj_identity_rule_2: (x&((~(2*(~x)))|(-1*(~x)))) => x
conj_disj_identity_rule_3: (x&((~((-1*y)*(~x)))|(-1*(~x)))) => x
disj_neg_disj_identity_rule_1: (x|(-1*((-1*x)|(y*x)))) => x
disj_neg_disj_identity_rule_2: (x|(-1*((-1*x)|((-1*y)*x)))) => x
disj_sub_disj_identity_rule_1: (x|((x|y)+(-1*y))) => x
disj_sub_disj_identity_rule_2: (x|(x+(-1*(x&y)))) => x
conj_add_conj_identity_rule: (x&(x+((~x)&y))) => x
disj_disj_conj_rule: (x|(-1*((-1*y)|(x&y)))) => (x|y)
conj_conj_disj_rule: (x&(-1*((-1*y)&(x|y)))) => (x&y)
disj_disj_conj_rule_2: ((-1*((-1*x)|((x&y)&z)))|(x&y)) => x
__check_bitwise_in_sums_cancel_terms-4: ((2*(x|y))+(-1*x)) => (y+(x^y))
__check_disj_involving_xor_in_sums_rule_1: ((x&y)|(x^y)) => ((x&y)+(x^y))
__check_disj_involving_xor_in_sums_rule_2: (((z&x)&y)|(x^y)) => (((z&x)&y)+(x^y))
__check_xor_involving_disj_rule: (x^(x|y)) => ((~x)&y)
add-negated-itself-by-two: ((a*a)+(a*(~a))) => (-1*a)
or-mul-shrink: (((c*x)+(c*y))+(-1*(c*(x&y)))) => (c*(x|y))
or-shrink: ((a&b)+(a^b)) => (a|b)
or-shrink-2: (~((~a)&(~b))) => (b|a)
or-shrink-3: (x+(y&(~x))) => (x|y)
or-shrink-4: ((a^b)|a) => (a|b)
xor-mul-shrink: (((c*x)+(c*y))+(-1*((2*c)*(x&y)))) => (c*(x^y))
xor-shrink: ((x+y)+(-2*(x&y))) => (x^y)
xor-shrink2: ((a|b)+(-1*(a&b))) => (a^b)
xor-shrink-3: ((~((~a)&(~b)))&(~(a&b))) => (b^a)
negated-xor-shrink-4: ((x&y)+(~(x|y))) => (~(x^y))
and-mul-shrink: (((a*b)+(a*c))+(-1*(a*(b|c)))) => (a*(b&c))
and-shrink: ((a|b)+(-1*(a^b))) => (a&b)
add-shrink: ((a&b)+(a|b)) => (a+b)
cancel-and-reduce-bitwise-subtraction: ((b*a)+(-1*(b*(a&d)))) => (b*(a&(~d)))
merge-and-multipliers: ((x*(a&c))+(-1*(y*(a&c)))) => ((x+(-1*y))*(a&c))
mba-1: (d+(-1*(d&a))) => ((~a)&d)
mba-2: ((-1*(d&a))+d) => ((~a)&d)
mba-4: ((d|a)+(-1*(a&(~d)))) => d
mba-5: ((-1*(a&(~d)))+(d|a)) => d
mba-9: ((a+(-2*d))+(2*((~a)&(2*d)))) => (a^(2*d))
new-2: ((x^y)+(-1*(x|y))) => (-1*(x&y))
new-3: ((a|b)+(-1*a)) => ((~a)&b)
new-16: ((a^b)&a) => (a&(~b))
new-23: (((~x)&y)+(-1*y)) => (-1*(x&y))
new-24: (((~x)&y)+(y*(-1*1))) => (-1*(x&y))
opaque-constant-1: (1&(y^((-1*2)+y))) => 0
opaque-constant-1-again: ((x&y)+(~(x&y))) => -1
opaque-constant-two: ((1&y)^(1&(y+(-1*2)))) => 0
opaque-variable-or: ((a&b)|a) => a
opaque-variable-add: ((a&(~d))+(d&a)) => a
reduce-and-xor-negated: ((a^b)&(c^(a^(~b)))) => (c&(a^b))
reduce-and-xor: ((y&(a1^c1))^(y&x)) => (y&(x^(a1^c1)))
reduced-or-or-xor: (((y^z)|(y&x))^y) => (z&(~(x&y)))
combine-and-add-xor-or: (((x&y)+(z^(x|y)))+(2*(z|(~(x&y))))) => (-2+((z^x)^y))
combine-and-add-xor-or-2: ((-1*((x&y)+(z^(x|y))))+(-2*(z|(~(x&y))))) => (2+(-1*((z^x)^y)))
pack-add-xor-or: ((y^(x^z))+(z^(y&x))) => (z+(z^(x|y)))
pack-negated-xor: (z&(y|(z^x))) => (z&((~x)|y))
negated-and-add: (((~x)&y)+(y&x)) => y
pack-negated-and-neg-into-xor: (((a&(~b))&(~c))+((a&b)&c)) => (a&(~(b^c)))
pack-neg-or-and-into-negated-xor: ((~(b|c))|(b&c)) => (~(b^c))
combine-xor-or: (z^(x|(~(y&z)))) => (~(z&(x|(~y))))
pack-and-xor: ((y&x)&(x^z)) => ((x&y)&(~z))
pack-into-negated-and-or-xor: ((~(y&x))&(x^(z^(~y)))) => (~((x&y)|((x^y)^z)))
linear-mba-1: ((y^(x|(y&(~z))))+((z^(x^y))|(x&y))) => (x+(x^(y|z)))
linear-mba-2: ((c1*(z^(~(x|(z&y)))))+((-1*c1)*((z&x)+(y|(x|(~z)))))) => ((-1*c1)*x)