[1mdiff --git a/Mba.Simplifier/Bindings/AstCtx.cs b/Mba.Simplifier/Bindings/AstCtx.cs[m
[1mindex f0d85f4..7edf6f9 100644[m
[1m--- a/Mba.Simplifier/Bindings/AstCtx.cs[m
[1m+++ b/Mba.Simplifier/Bindings/AstCtx.cs[m
[36m@@ -47,6 +47,7 @@[m [mnamespace Mba.Simplifier.Bindings[m
 [m
         // Constructors[m
         public unsafe AstIdx Add(AstIdx a, AstIdx b) => Api.ContextAdd(this, a, b);[m
[32m+[m[32m        public unsafe AstIdx Sub(AstIdx a, AstIdx b) => Add(a, Mul(Constant(ulong.MaxValue, GetWidth(a)), b));[m
         public unsafe AstIdx Mul(AstIdx a, AstIdx b) => Api.ContextMul(this, a, b);[m
         public unsafe AstIdx Pow(AstIdx a, AstIdx b) => Api.ContextPow(this, a, b);[m
         public unsafe AstIdx And(AstIdx a, AstIdx b) => Api.ContextAnd(this, a, b);[m
[1mdiff --git a/Mba.Simplifier/Minimization/AnfMinimizer.cs b/Mba.Simplifier/Minimization/AnfMinimizer.cs[m
[1mindex a47ee56..3ffd8f9 100644[m
[1m--- a/Mba.Simplifier/Minimization/AnfMinimizer.cs[m
[1m+++ b/Mba.Simplifier/Minimization/AnfMinimizer.cs[m
[36m@@ -42,6 +42,12 @@[m [mnamespace Mba.Simplifier.Minimization[m
             var resultVec = resultVector.Select(x => (ulong)x).ToArray();[m
             var variableCombinations = MultibitSiMBA.GetVariableCombinations(variables.Count);[m
 [m
[32m+[m[32m            //var zeroConj = ctx.Neg(LinearSimplifier.ConjunctionFromVarMask(ctx, variables, 1, variableCombinations[variableCombinations.Length - 1]))[m
[32m+[m[32m            //[m
[32m+[m[32m            var zeroConj = ctx.Neg(ctx.Or(variables));[m
[32m+[m[32m            if (resultVec[0] != 0 && resultVec.Skip(1).All(x => x == 0))[m
[32m+[m[32m                return zeroConj;[m
[32m+[m
             // Keep track of which variables are demanded by which combination,[m
             // as well as which result vector idx corresponds to which combination.[m
             var groupSizes = MultibitSiMBA.GetGroupSizes(variables.Count);[m
[36m@@ -53,6 +59,8 @@[m [mnamespace Mba.Simplifier.Minimization[m
                 combToMaskAndIdx.Add((comb, (int)myIndex));[m
             }[m
 [m
[32m+[m
[32m+[m
             var varCount = variables.Count;[m
             bool onlyOneVar = varCount == 1;[m
             int width = (int)(varCount == 1 ? 1 : 2u << (ushort)(varCount - 1));[m
[36m@@ -100,17 +108,21 @@[m [mnamespace Mba.Simplifier.Minimization[m
             }[m
 [m
             var factored = Factor(terms.Select(x => (uint)variableCombinations[x]).ToList(), demandedVarsMap);[m
[32m+[m[32m            if (resultVec[0] != 0)[m
[32m+[m[32m                factored = ctx.Or(factored.Value, zeroConj);[m
             var simplified = SimplifyRec(factored.Value);[m
 [m
             // The results are somewhat improved by running the simplifier a few times, but we don't want to pay this cost for now.[m
[31m-            /*[m
[32m+[m[41m            [m
             simplified = SimplifyRec(factored.Value);[m
             for (int i = 0; i < 3; i++)[m
             {[m
                 simplified = SimplifyRec(simplified);[m
                 simplified = ctx.RecursiveSimplify(simplified);[m
             }[m
[31m-            */[m
[32m+[m[41m            [m
[32m+[m
[32m+[m[32m            // Peephole rules: a^(b&~a) = a|b[m
 [m
             return simplified;[m
         }[m
[1mdiff --git a/Mba.Simplifier/Minimization/BooleanMinimizer.cs b/Mba.Simplifier/Minimization/BooleanMinimizer.cs[m
[1mindex 23cd464..e6d8df0 100644[m
[1m--- a/Mba.Simplifier/Minimization/BooleanMinimizer.cs[m
[1m+++ b/Mba.Simplifier/Minimization/BooleanMinimizer.cs[m
[36m@@ -37,17 +37,23 @@[m [mnamespace Mba.Simplifier.Minimization[m
 [m
             // If there are four or less variables, we can pull the optimal representation from the truth table.[m
             // TODO: One could possibly construct a 5 variable truth table for all 5 variable NPN classes.[m
[31m-            if (variables.Count <= 4)[m
[32m+[m[32m            if (false)[m
             {[m
                 return FromTruthTable(ctx, variables, truthTable);[m
             }[m
 [m
             // For debugging purposes we still want to keep the legacy boolean minimization logic around.[m
[31m-            if (useLegacyMinimizer)[m
[32m+[m[32m            if (true)[m
             {[m
                 // Otherwise use Espresso to compute a semi optimal version of the boolean function.[m
[31m-                var xnf = AnfMinimizer.SimplifyBoolean(ctx, variables, truthTable.AsList());[m
[32m+[m[32m                // return EspressoMinimizer.SimplifyBoolean(ctx, truthTable.AsList(), variables).ast;[m
                 var dnf = EspressoMinimizer.SimplifyBoolean(ctx, truthTable.AsList(), variables).ast;[m
[32m+[m[32m                //var dnfStr = ctx.GetAstString(dnf);[m
[32m+[m[32m                //if (dnfStr == "(((~v0)&(~v2))|(v0&v2))")[m
[32m+[m[32m                //    Debugger.Break();[m
[32m+[m[32m                var xnf = AnfMinimizer.SimplifyBoolean(ctx, variables, truthTable.AsList());[m
[32m+[m[32m                //var xnfStr = ctx.GetAstString(xnf);[m
[32m+[m[32m                //Console.WriteLine($"prove(({dnfStr}) == ({xnfStr})) ");[m
 [m
                 var c1 = LinearSimplifier.GetCost(ctx, xnf, false, 1);[m
                 var c2 = LinearSimplifier.GetCost(ctx, dnf, false, 1);[m
[1mdiff --git a/Mba.Simplifier/Pipeline/LinearSimplifier.cs b/Mba.Simplifier/Pipeline/LinearSimplifier.cs[m
[1mindex bdb6110..881ed7b 100644[m
[1m--- a/Mba.Simplifier/Pipeline/LinearSimplifier.cs[m
[1m+++ b/Mba.Simplifier/Pipeline/LinearSimplifier.cs[m
[36m@@ -1496,10 +1496,11 @@[m [mnamespace Mba.Simplifier.Pipeline[m
             if (constant == signBit)[m
             {[m
                 var withoutSign = SubtractSignBit(coeff, bitwise);[m
[31m-                if (withoutSign == null)[m
[31m-                    throw new InvalidOperationException($"Failed to partition constant offset!");[m
[31m-                var coeffId = ctx.Constant(coeff, width);[m
[31m-                return ctx.Mul(coeffId, withoutSign.Value);[m
[32m+[m[32m                if (withoutSign != null)[m
[32m+[m[32m                {[m
[32m+[m[32m                    var coeffId = ctx.Constant(coeff, width);[m
[32m+[m[32m                    return ctx.Mul(coeffId, withoutSign.Value);[m
[32m+[m[32m                }[m
             }[m
 [m
             // Try to fit the constant offset into the undemanded bits.[m
[1mdiff --git a/Mba.Simplifier/Utility/AstRewriter.cs b/Mba.Simplifier/Utility/AstRewriter.cs[m
[1mindex 893159a..42a4b45 100644[m
[1m--- a/Mba.Simplifier/Utility/AstRewriter.cs[m
[1m+++ b/Mba.Simplifier/Utility/AstRewriter.cs[m
[36m@@ -1,4 +1,5 @@[m
 ï»¿using Mba.Simplifier.Bindings;[m
[32m+[m[32musing Mba.Utility;[m
 using System;[m
 using System.Collections.Generic;[m
 using System.Linq;[m
[36m@@ -22,7 +23,7 @@[m [mnamespace Mba.Simplifier.Utility[m
                 AstOp.Or => binop(),[m
                 AstOp.Xor => binop(),[m
                 AstOp.Neg => ctx.Neg(ChangeBitwidth(ctx, ctx.GetOp0(node), newWidth)),[m
[31m-                AstOp.Constant => ctx.Constant(ctx.GetConstantValue(node), newWidth),[m
[32m+[m[32m                AstOp.Constant => ctx.Constant(ctx.GetConstantValue(node) & (ulong)ModuloReducer.GetMask(newWidth), newWidth),[m
                 AstOp.Symbol => ctx.Symbol(ctx.GetSymbolName(node), (byte)newWidth),[m
                 _ => throw new InvalidOperationException($"Cannot change width of opcode {opcode}"),[m
             };[m
[1mdiff --git a/Simplifier/Program.cs b/Simplifier/Program.cs[m
[1mindex e08fc2b..fdb05a1 100644[m
[1m--- a/Simplifier/Program.cs[m
[1m+++ b/Simplifier/Program.cs[m
[36m@@ -13,8 +13,28 @@[m [mbool printUsage = false;[m
 uint bitWidth = 64;[m
 bool useEqsat = false;[m
 bool proveEquivalence = false;[m
[31m-string inputText = null;[m
[31m-[m
[32m+[m[32mstring inputText = "-32768+(32768^-4941426531940433920+x*(1130079700295614467+x*(-5834123321066651648-8478356289452244992*(-32769^x))+(599408178450399232-3326667537592090624*x+3326667537592090624*(-32769|x))*(-32769&x))+(8084554723811655680-2635853246672928768*x+2635853246672928768*(-32769|x)+4320021867462131712*(-32769&x)*(-32769&x))*(-32769|x)+(-3622491828239990786+3778117597388603392*x-3778117597388603392*(-32769|x))*(-32769&x)+8625632023702142976*(-1122478164347-17126441*x-34252882*(-32769|x))*(-1122478164347-17126441*x-34252882*(-32769|x))*(-1122478164347-17126441*x-34252882*(-32769|x)))";[m
[32m+[m[32minputText = "(x^8000) - 0x8000";[m
[32m+[m[32minputText = "-c1+(c1^-4941426531940433920+x*(1130079700295614467+x*(-5834123321066651648-8478356289452244992*(~c1^x))+(599408178450399232-3326667537592090624*x+3326667537592090624*(~c1|x))*(~c1&x))+(8084554723811655680-2635853246672928768*x+2635853246672928768*(~c1|x)+4320021867462131712*(~c1&x)**2)*(~c1|x)+(-3622491828239990786+3778117597388603392*x-3778117597388603392*(~c1|x))*(~c1&x)+8625632023702142976*(-1122478164347-17126441*x-34252882*(~c1|x))*(-1122478164347-17126441*x-34252882*(~c1|x))*(-1122478164347-17126441*x-34252882*(~c1|x)))";[m
[32m+[m[32minputText = "(-4941426531940433920+(((((-2*(c1&(-4941426531940433920+((((8625632023702142976*(((-1122443911465+((34252882*(c1&(~x)))+(-17126441*x)))**2)*(-1122443911465+((34252882*(c1&(~x)))+(-17126441*x)))))+((155625769148612606+(3778117597388603392*(c1|x)))*(~(c1|(~x)))))+((5448701477138726912+((-2635853246672928768*(c1|x))+(4320021867462131712*((~(c1|(~x)))**2))))*(~(c1&(~x)))))+(x*(1130079700295614467+(((-2727259359141691392+(-3326667537592090624*(c1|x)))*(~(c1|(~x))))+(x*(2644232968385593344+(8478356289452244992*(c1^x)))))))))))+(8625632023702142976*(((-1122443911465+((34252882*(c1&(~x)))+(-17126441*x)))**2)*(-1122443911465+((34252882*(c1&(~x)))+(-17126441*x))))))+((155625769148612606+(3778117597388603392*(c1|x)))*(~(c1|(~x)))))+((5448701477138726912+((-2635853246672928768*(c1|x))+(4320021867462131712*((~(c1|(~x)))**2))))*(~(c1&(~x)))))+(x*(1130079700295614467+(((-2727259359141691392+(-3326667537592090624*(c1|x)))*(~(c1|(~x))))+(x*(2644232968385593344+(8478356289452244992*(c1^x)))))))))";[m
[32m+[m[32minputText = "(-4941426531940433920+(((((-2*(32768&(-4941426531940433920+((((8625632023702142976*(((-1122443911465+((34252882*(32768&(~x)))+(-17126441*x)))**2)*(-1122443911465+((34252882*(32768&(~x)))+(-17126441*x)))))+((155625769148612606+(3778117597388603392*(32768|x)))*(~(32768|(~x)))))+((5448701477138726912+((-2635853246672928768*(32768|x))+(4320021867462131712*((~(32768|(~x)))**2))))*(~(32768&(~x)))))+(x*(1130079700295614467+(((-2727259359141691392+(-3326667537592090624*(32768|x)))*(~(32768|(~x))))+(x*(2644232968385593344+(8478356289452244992*(32768^x)))))))))))+(8625632023702142976*(((-1122443911465+((34252882*(32768&(~x)))+(-17126441*x)))**2)*(-1122443911465+((34252882*(32768&(~x)))+(-17126441*x))))))+((155625769148612606+(3778117597388603392*(32768|x)))*(~(32768|(~x)))))+((5448701477138726912+((-2635853246672928768*(32768|x))+(4320021867462131712*((~(32768|(~x)))**2))))*(~(32768&(~x)))))+(x*(1130079700295614467+(((-2727259359141691392+(-3326667537592090624*(32768|x)))*(~(32768|(~x))))+(x*(2644232968385593344+(8478356289452244992*(32768^x)))))))))";[m
[32m+[m[32minputText = "(((((x^234553572709)*8832462118075760640)+(((x&1111)*5151688751860154368)+(3633021988538155008+(x*348369676461408256))))*((-2*(1952824900234352407+(((7435498274668328905+(((x^234553572709)*((((x&1111)*2271486959545805916)+((x^234553572709)*4976641594170654992))+(3975574136312458136+(x*-7884963555528148792))))+((((x&1111)+5646554645656)*((x*4545453343454543)+(((x^234553572709)*2271486959545805916)+((x&1111)+9112550001883916217))))+((x*(((x&1111)*4545453343454543)+(6854384986160546070+(x*-5677031563716997535))))+((x&1111)*9112555648438561873)))))*(((x^234553572709)*4580097530397720576)+((4845338853579423744+(x*-8062972478789517312))+((x&-1112)*718486026472914944))))+(((((((x&1111)*6668365811452739584)+6570260374635937792)*(((x&1111)*204919)+((x*9112550001883916217)+7624742579736286975)))+(((x^234553572709)*(((x&1111)*-733816809156771840)+3478964741446041600))+(((x&1111)*-1323997817307398144)+3728039309509394432)))+(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+-7521170806894755840))))*((((x&1111)+5646554645656)*((x*4545453343454543)+(((x^234553572709)*2271486959545805916)+((x&1111)+9112550001883916217))))+(5548450882191956544+((x&1111)*5646554645656))))+((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+6318542168302551040))))*(((x*4545453343454543)+(9112550001883916217+((x^234553572709)*2271486959545805916)))*((x*4545453343454543)+(((x&1111)+9112555648438561873)+((x^234553572709)*2271486959545805916)))))))*((6387501659116215273+((x^234553572709)*5282264283420030204))+((x*-6985785885310374729)+((x&1111)*8301266891075061785)))))))+((((x*-6122311401756295314)+((x&1111)*-1364817376554808782))+((x^234553572709)*-4014455991740677640))+(((((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+-7521170806894755840))))*((((x&1111)+5646554645656)*((x*4545453343454543)+(((x^234553572709)*2271486959545805916)+((x&1111)+9112550001883916217))))+(5548450882191956544+((x&1111)*5646554645656))))+(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+6318542168302551040))))*(((x*4545453343454543)+(9112550001883916217+((x^234553572709)*2271486959545805916)))*((x*4545453343454543)+(((x&1111)+9112555648438561873)+((x^234553572709)*2271486959545805916)))))+(1174233978871888639+((-7478608832042631168+(((x&-1112)*-3315640569836863488)+(x*((x*7365356540221456384)+(((x&-1112)*-2843328118716891136)+7323168279063691264)))))+((((x^234553572709)*((((x^234553572709)*6401332782533967872)+((x&-1112)*-5510160053962801152))+((x*3760307227005550592)+8702724556361564160)))+((x&1111)*(((x&1111)*-4993160048675913728)+(1638086233043238912+(x*2843328118716891136)))))+(((x*4545453343454543)+((x&1111)+9112550001883916217))*(-1323997817307398144+((x&1111)*-4607031098512244736))))))))*(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+-7521170806894755840))))*((((x&1111)+5646554645656)*((x*4545453343454543)+(((x^234553572709)*2271486959545805916)+((x&1111)+9112550001883916217))))+(5548450882191956544+((x&1111)*5646554645656))))+(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+6318542168302551040))))*(((x*4545453343454543)+(9112550001883916217+((x^234553572709)*2271486959545805916)))*((x*4545453343454543)+(((x&1111)+9112555648438561873)+((x^234553572709)*2271486959545805916)))))+(1174233978871888639+((-7478608832042631168+(((x&-1112)*-3315640569836863488)+(x*((x*7365356540221456384)+(((x&-1112)*-2843328118716891136)+7323168279063691264)))))+((((x^234553572709)*((((x^234553572709)*6401332782533967872)+((x&-1112)*-5510160053962801152))+((x*3760307227005550592)+8702724556361564160)))+((x&1111)*(((x&1111)*-4993160048675913728)+(1638086233043238912+(x*2843328118716891136)))))+(((x*4545453343454543)+((x&1111)+9112550001883916217))*(-1323997817307398144+((x&1111)*-4607031098512244736)))))))))+(((x*6985785885310374729)+(((x&1111)*-8301266891075061785)+(((x^234553572709)*-5282264283420030204)+-6387501659116215273)))*((x*6985785885310374729)+(((x&1111)*-8301266891075061785)+(((x^234553572709)*-5282264283420030204)+-6387501659116215273))))))))+(((((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+-7521170806894755840))))*((x^234553572709)*(((x&1111)*4875568740374151168)+2630021368279728128)))+(((x&1111)*4935577112900796416)+((-4077449948604399616*(x&234553572709))+(-7502873387220336640+(x*-5489572300028116992)))))*(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+-7521170806894755840))))*((((x&1111)+5646554645656)*((x*4545453343454543)+(((x^234553572709)*2271486959545805916)+((x&1111)+9112550001883916217))))+(5548450882191956544+((x&1111)*5646554645656))))+(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+(((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234)))+(((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+6318542168302551040))))*(((x*4545453343454543)+(9112550001883916217+((x^234553572709)*2271486959545805916)))*((x*4545453343454543)+(((x&1111)+9112555648438561873)+((x^234553572709)*2271486959545805916)))))+(((((x&1111)*6668365811452739584)+6570260374635937792)*(((x&1111)*204919)+((x*9112550001883916217)+7624742579736286975)))+(((x&1111)*(((x&-1112)*4993160048675913728)+((x*-2149831929959022592)+-3347540088194959385)))+((x*(((x&-1112)*-2843328118716891136)+((x*7365356540221456384)+-7453430479172349111)))+(((x^234553572709)*((x*3760307227005550592)+((((x^234553572709)*6401332782533967872)+((x&-1112)*-5510160053962801152))+3420460272941533956)))+5754867561422593814)))))))+(((x^234553572709)*(-2003648835389227008+(((x&1111)*-4216866236300001280)+((7805867467962117212+(x*6966006495309725696))+(((x&-1112)*-2209285135012986880)+((x^234553572709)*-4478605803925798912))))))+(((-2276032412889260459*((x^46380)&-234553563476))+(x*((x*3955518902267543552)+2754399498003283968)))+((((((x&-1112)*-8625632023702142976)+((x*-3152746238554669056)+6318542168302551040))*(((x*4545453343454543)+(9112550001883916217+((x^234553572709)*2271486959545805916)))*(((x^234553572709)*-2789650995891145404)+(((x&-1112)*4428847504012170281)+(6883760772310274823+(x*6460465328833967664))))))+(((x&1111)*(((x&1111)*-4711560174316290048)+(3051834401387184129+(x*458564948000243712))))+((((x*3639925856408698880)+(4545453343454543*(x|-20)))+((2266941506202351373*(x&234553563456))+(-2271486959545805916*(x^1111))))+((-2280577866232715002*(x&19))+((2271486959545805916*(x^33886))+((7797062703974505664+(9090906686909086*(x&-42029)))+(x*4270824044323850929)))))))+(((((-8084284862426513408&(~((x^234553572709)*23432324234)))*(((x^234553572709)*23432324234)&8084284862426513407))+((-8084284862426513408&((x^234553572709)*23432324234))*(-8084284862426513408|((x^234553572709)*23432324234))))*((((x*4545453343454543)+(9112550001883916217+((x^234553572709)*2271486959545805916)))*(((x^234553572709)*-2789650995891145404)+(((x&-1112)*4428847504012170281)+(6883760772310274823+(x*6460465328833967664)))))+((((x^234553572709)*(((x&1111)*-2789650995891145404)+-7494139320817176480))+(x*-2724591905620113192))+(-7364557471282419672+((x&1111)*(((x&-1112)*4428847504012170281)+((x*6460465328833967664)+-2931996177209772369)))))))+(((x&1111)*(-6754785673049276416+(((x&1111)*-9218457907073384448)+(x*-7328185883197177856))))+((43266145391